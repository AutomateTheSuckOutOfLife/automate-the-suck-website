---
import { ViewTransitions } from 'astro:transitions';
import Navigation from '../components/Navigation.astro';
import '../styles/theme.css';

interface Props {
  title: string;
}

const { title } = Astro.props;
const siteTitle = "Automate The Suck";
const siteDescription = "Automating the Suck Out of life with accessible tools and tech.";
const siteUrl = Astro.url.origin;
const ogImageUrl = `${siteUrl}/images/ast-logo.svg`;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={siteDescription} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Roboto+Slab:wght@400;500;700&family=Roboto+Mono:wght@400;500;700&display=swap" rel="stylesheet">
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title || siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:image" content={ogImageUrl} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title || siteTitle} />
    <meta property="twitter:description" content={siteDescription} />
    <meta property="twitter:image" content={ogImageUrl} />
    
    <ViewTransitions fallback="swap" />
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return 'light';
      })();
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      }
    </script>
  </head>
  <body class="bg-background dark:bg-dark-background text-accent dark:text-dark-text min-h-screen">
    <Navigation transition:persist transition:name="nav" />
    <main class="transition-all duration-300 ease-in-out motion-reduce:transition-none">
      <slot />
    </main>
  </body>
</html>

<style is:global>
  :root {
    --transition-length: 200ms;
  }

  html {
    scroll-behavior: smooth;
  }

  body {
    overflow-x: hidden;
  }

  /* Smooth transition styles */
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }

  /* Ensure dark mode persists during transitions */
  ::view-transition-old(root) {
    z-index: 1;
  }
  ::view-transition-new(root) {
    z-index: 2;
  }

  .dark::view-transition-old(root) {
    z-index: 2;
  }
  .dark::view-transition-new(root) {
    z-index: 1;
  }

  /* Custom transition animations */
  @keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes fade-out {
    from { opacity: 1; }
    to { opacity: 0; }
  }

  ::view-transition-old(nav-link) {
    animation: fade-out var(--transition-length) ease-in-out;
  }

  ::view-transition-new(nav-link) {
    animation: fade-in var(--transition-length) ease-in-out;
  }

  /* Reduce motion if preferred */
  @media (prefers-reduced-motion: reduce) {
    ::view-transition-group(*),
    ::view-transition-old(*),
    ::view-transition-new(*) {
      animation: none !important;
    }
  }

  /* Apply Roboto Mono to all buttons */
  a[class*="bg-"][class*="rounded-full"],
  button[class*="bg-"][class*="rounded-full"],
  .btn, 
  [class*="px-"][class*="py-"][class*="rounded-full"] {
    font-family: 'Roboto Mono', monospace !important;
    letter-spacing: -0.01em;
  }
</style>